%h1 How to Use

%p StaticMatic is very easy to work with.  It aims to provide just the tools you need and not get in your way.

%ul 
  %li= link "Developing a site", "#developing"
  %li= link "Configuration", "#configuration"
  %li
    = link "Templates", "#templates"
    %ul 
      %li= link "Layouts", "#layouts"
      %li= link "Helpers", "#helpers"
      %li= link "Partials", "#partials"
  
%h2{:id => 'developing'} Developing a site with StaticMatic

%h3 Setting up a site

%p The first thing to do with a StaticMatic site is to set up the folders and files ready for use.  A simple command will create everything you need to get started:

.code staticmatic setup my_site

%p This will set up a number of directories:

%ul
  %li site/  - contains your static site and any assets such as images or javascript files
  %li 
    src/  - where you'll work on your templates
    %ul
      %li
        helpers/ - contains any helpers you want to use in your website
        (write your own or grab some from
        = link_to('Helper Central', '/helper_central/') + ')'
      %li layouts/ - contains templates that 'wrap' your main content pages
      %li pages/ - contains the actual pages of content
      %li partials/ - contains any &quot;partial pages&quot; that can be reused in other pages or layouts
      %li 
        stylesheets/ - contains any 
        = link 'Sass', 'http://haml.hamptoncatlin.com/docs/sass'
        stylesheets you want to create

%h3 Previewing your site

%p When you're ready to start working on your site, you can fire up the preview server to see your changes:

.code staticmatic preview my_site

%p 
  This will start a web server on port 3000.  Point your web browser to 
  = link "http://localhost:3000", "http://localhost:3000"
  to see your site.

%h3 Building your site

%p When you're happy with the website, you can tell StaticMatic to generate the HTML pages:

.code staticmatic build my_site

%h2{:id => 'configuration'} Configuration

%p
  You can put a file called configuration.rb in your staticmatic project's basedir/src directory.
  In this file, you can set configuration settings or whatever else since it's just a 
  ruby file.

%h3 configuration.preview_server_port

%p
  The default is 3000.

%h3 configuration.preview_server_host

%p
  The default is localhost.

%h3 configuration.use_extensions_for_page_links

%p
  The default is true.  When false .html and index.html will be stripped off
  urls generated by the link tag helper.

%h3 configuration.sass_options

%p
  Default is an empty hash.  You can specify any options that 
  = link 'Sass', 'http://haml.hamptoncatlin.com/docs/sass'
  can take like :style => :compact

%h3 configuration.haml_options

%p
  Default is an empty hash.  You can specify any options that 
  = link 'Haml', 'http://haml.hamptoncatlin.com/docs/haml'
  can take like:

.code :attr_wrapper => '"'

%p
  (have Haml use double quotes instead of single quotes for 
  wrapping HTML attribute values)

%h2{:id => 'templates'} Templates

%p 
  %em
    For information on how to use Haml itself, please check out the 
    = link("Haml website", "http://haml.hamptoncatlin.com/docs/haml") + "."
  
%h3{:id => 'layouts'} Layouts

%p 
  As with web frameworks like
  = link("Ruby on Rails", "http://www.rubyonrails.com") + ","
  StaticMatic uses layouts to 'wrap' up the content contained within page templates.

%p A layout typically contains the header and footer code for a page - code that is common to all pages on the site.

%p The only thing a layout *must* contain is a line that tells StaticMatic where to put the content:

.code = yield

%p By default, StaticMatic will look for a template named 'application.haml'.  If you have a page that needs to use a different layout, this can be specified in the page itself:

%em contact_us.haml:
.code - @layout = "contact"

%p The above code would tell StaticMatic to use the layout called 'contact.haml' when building and previewing the 'contact_us' page.


%h3{:id => 'helpers'} Helpers

%p StaticMatic provides a number of 'helpers' on top of those in Haml to handle common code and reduce code.
%p
  %em
    Additionally you can write your own helpers and put them in your 
    staticmatic src/helpers directory.  You can checkout the
    = link_to 'Helper Central', '/helper_central/'
    for some helpers that have already been written by others that 
    you can drop in your helper directory.

%h4 Links

%p
  'link' ('link_to' works too for you 
  = link_to 'Rails', 'http://www.rubyonrails.com/'
  types) can automatically set up hyperlinks for you:

.code = link "Contact Us"

produces:

.code &lt;a href="contact_us.html"&gt;Contact Us&lt;/a&gt;"

%p It is also possible to specify a relative path in your url:

.code = link "../Contact Us"

produces:

.code &lt;a href="../contact_us.html"&gt;Contact Us&lt;/a&gt;"

%p You can also specify a URL:

.code = link "StaticMatic", "http://staticmatic.rubyforge.org"

%h4 Images

.code = img "me.jpg"
produces:
.code &lt;img src="/images/me.jpg"/&gt;

%p It is also possible to specify a relative path in your url:

.code = img "../me.jpg"
produces:
.code &lt;img src="../me.jpg"/&gt;

%h4 Stylesheets

.code = stylesheets

%p
  This will automatically insert links to any 
  = link 'Sass', 'http://haml.hamptoncatlin.com/docs/sass'
  stylesheets in your site source.  

  It will also link up any static stylesheets in your site/stylesheets/ directory

%p
  You can also specify the files and the order explicitly along with setting attributes:

.code = stylesheets :reset, :application, :media => :screen

produces

.code 
  &lt;link href=&quot;stylesheets/reset.css&quot; media=&quot;screen&quot; rel=&quot;stylesheet&quot;/&gt;
  %br
  &lt;link href=&quot;stylesheets/application.css&quot; media=&quot;screen&quot; rel=&quot;stylesheet&quot;/&gt;

%h4 Javascript

.code = javascripts('test', :other)
produces:
.code
  &lt;script language=&quot;javascript&quot; src=&quot;/javascripts/test.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
  %br
  &lt;script language=&quot;javascript&quot; src=&quot;/javascripts/other.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;

%h4 Current page

%p
  It can be very useful to know what page you're on in your layout and helpers
  (ie: setting selected style on a menu item).

For the page src/pages/index.html
.code = current_page # =&gt; &quot;/index.html&quot;
%br
For the page src/pages/subdirectory/other.html
.code = current_page # =&gt; &quot;/subdirectory/other.html&quot;

%h4 urlify

%p Will convert a string to be usable in a url

.code
  \= urlify(&quot;We love Haml&quot;) # =&gt; &quot;we_love_haml&quot;
  %br
  \= urlify(&quot;Elf &amp; Ham&quot;) # =&gt; &quot;elf_and_ham&quot;
  %br
  \= urlify(&quot;Stephen's gem&quot;) # =&gt; &quot;stephens_gem&quot;
  %br
  \= urlify(&quot;Test/Link&quot;) # =&gt; &quot;testlink&quot;

%h4 text_area

%p Generates a text area field

.code = text_area 'myname', 'myvalue'
produces:
.code &lt;textarea id=&quot;myname&quot; name=&quot;myname&quot;&gt;myvalue&lt;/textarea&gt;

%h4 text_field

%p Generates a text input field

.code = text_field('first_name', 'bob')
produces:
.code &lt;input name=&quot;first_name&quot; type=&quot;text&quot; value=&quot;bob&quot;/&gt;


%h3{:id => 'partials'} Partials

%p 
  As with web frameworks like
  = link("Ruby on Rails", "http://www.rubyonrails.com") + ","
  StaticMatic uses partials to keep things 
  = link('DRY', 'http://en.wikipedia.org/wiki/DRY') + "."

.code = partial('mypartial')

%p
  This will first look in the current page/partial's directory for a file called _mypartial.haml.
  If not found there it will look for src/partials/mypartial.haml.

%h4 Specify the partial's local variables

.code = partial('mypartial', :locals => { :title => 'My Title' })
  
%p
  This will locate the partial file as in the previous example above but now passes in a local variable called
  %em title
  that can be used in the partial like so:

.code %h1 title

%h4 Specify the partial's directory

.code = partial('shared/mypartial')

%p
  This will look for the file src/pages/shared/_mypartial.haml first.
  If not found there it will look for src/partials/mypartial.haml.
